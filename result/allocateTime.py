from tarfile import PAX_NAME_FIELDS
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from statistics import mean
from scipy import stats





stagePolicy=[
    [""],
    ["_3-4-2-4-9-5","_3-4-2-4-9-4","_3-4-2-4-8-5","_3-4-2-4-8-4","_3-4-2-4-7-5","_3-4-2-4-7-4","_3-4-2-4-6-5","_3-4-2-4-6-4","_3-4-2-3-9-5","_3-4-2-3-9-4","_3-4-2-3-8-5","_3-4-2-3-8-4","_3-4-2-3-7-5","_3-4-2-3-7-4","_3-4-2-3-6-5","_3-4-2-3-6-4","_3-4-2-2-9-5","_3-4-2-2-9-4","_3-4-2-2-8-5","_3-4-2-2-8-4","_3-4-2-2-7-5","_3-4-2-2-7-4","_3-4-2-2-6-5","_3-4-2-2-6-4","_3-4-1-4-9-5","_3-4-1-4-9-4","_3-4-1-4-8-5","_3-4-1-4-8-4","_3-4-1-4-7-5","_3-4-1-4-7-4","_3-4-1-4-6-5","_3-4-1-4-6-4","_3-4-1-3-9-5","_3-4-1-3-9-4","_3-4-1-3-8-5","_3-4-1-3-8-4","_3-4-1-3-7-5","_3-4-1-3-7-4","_3-4-1-3-6-5","_3-4-1-3-6-4","_3-4-1-2-9-5","_3-4-1-2-9-4","_3-4-1-2-8-5","_3-4-1-2-8-4","_3-4-1-2-7-5","_3-4-1-2-7-4","_3-4-1-2-6-5","_3-4-1-2-6-4","_3-3-2-4-9-5","_3-3-2-4-9-4","_3-3-2-4-8-5","_3-3-2-4-8-4","_3-3-2-4-7-5","_3-3-2-4-7-4","_3-3-2-4-6-5","_3-3-2-4-6-4","_3-3-2-3-9-5","_3-3-2-3-9-4","_3-3-2-3-8-5","_3-3-2-3-8-4","_3-3-2-3-7-5","_3-3-2-3-7-4","_3-3-2-3-6-5","_3-3-2-3-6-4","_3-3-2-2-9-5","_3-3-2-2-9-4","_3-3-2-2-8-5","_3-3-2-2-8-4","_3-3-2-2-7-5","_3-3-2-2-7-4","_3-3-2-2-6-5","_3-3-2-2-6-4","_3-3-1-4-9-5","_3-3-1-4-9-4","_3-3-1-4-8-5","_3-3-1-4-8-4","_3-3-1-4-7-5","_3-3-1-4-7-4","_3-3-1-4-6-5","_3-3-1-4-6-4","_3-3-1-3-9-5","_3-3-1-3-9-4","_3-3-1-3-8-5","_3-3-1-3-8-4","_3-3-1-3-7-5","_3-3-1-3-7-4","_3-3-1-3-6-5","_3-3-1-3-6-4","_3-3-1-2-9-5","_3-3-1-2-9-4","_3-3-1-2-8-5","_3-3-1-2-8-4","_3-3-1-2-7-5","_3-3-1-2-7-4","_3-3-1-2-6-5","_3-3-1-2-6-4","_3-2-2-4-9-5","_3-2-2-4-9-4","_3-2-2-4-8-5","_3-2-2-4-8-4","_3-2-2-4-7-5","_3-2-2-4-7-4","_3-2-2-4-6-5","_3-2-2-4-6-4","_3-2-2-3-9-5","_3-2-2-3-9-4","_3-2-2-3-8-5","_3-2-2-3-8-4","_3-2-2-3-7-5","_3-2-2-3-7-4","_3-2-2-3-6-5","_3-2-2-3-6-4","_3-2-2-2-9-5","_3-2-2-2-9-4","_3-2-2-2-8-5","_3-2-2-2-8-4","_3-2-2-2-7-5","_3-2-2-2-7-4","_3-2-2-2-6-5","_3-2-2-2-6-4","_3-2-1-4-9-5","_3-2-1-4-9-4","_3-2-1-4-8-5","_3-2-1-4-8-4","_3-2-1-4-7-5","_3-2-1-4-7-4","_3-2-1-4-6-5","_3-2-1-4-6-4","_3-2-1-3-9-5","_3-2-1-3-9-4","_3-2-1-3-8-5","_3-2-1-3-8-4","_3-2-1-3-7-5","_3-2-1-3-7-4","_3-2-1-3-6-5","_3-2-1-3-6-4","_3-2-1-2-9-5","_3-2-1-2-9-4","_3-2-1-2-8-5","_3-2-1-2-8-4","_3-2-1-2-7-5","_3-2-1-2-7-4","_3-2-1-2-6-5","_3-2-1-2-6-4","_2-4-2-4-9-5","_2-4-2-4-9-4","_2-4-2-4-8-5","_2-4-2-4-8-4","_2-4-2-4-7-5","_2-4-2-4-7-4","_2-4-2-4-6-5","_2-4-2-4-6-4","_2-4-2-3-9-5","_2-4-2-3-9-4","_2-4-2-3-8-5","_2-4-2-3-8-4","_2-4-2-3-7-5","_2-4-2-3-7-4","_2-4-2-3-6-5","_2-4-2-3-6-4","_2-4-2-2-9-5","_2-4-2-2-9-4","_2-4-2-2-8-5","_2-4-2-2-8-4","_2-4-2-2-7-5","_2-4-2-2-7-4","_2-4-2-2-6-5","_2-4-2-2-6-4","_2-4-1-4-9-5","_2-4-1-4-9-4","_2-4-1-4-8-5","_2-4-1-4-8-4","_2-4-1-4-7-5","_2-4-1-4-7-4","_2-4-1-4-6-5","_2-4-1-4-6-4","_2-4-1-3-9-5","_2-4-1-3-9-4","_2-4-1-3-8-5","_2-4-1-3-8-4","_2-4-1-3-7-5","_2-4-1-3-7-4","_2-4-1-3-6-5","_2-4-1-3-6-4","_2-4-1-2-9-5","_2-4-1-2-9-4","_2-4-1-2-8-5","_2-4-1-2-8-4","_2-4-1-2-7-5","_2-4-1-2-7-4","_2-4-1-2-6-5","_2-4-1-2-6-4","_2-3-2-4-9-5","_2-3-2-4-9-4","_2-3-2-4-8-5","_2-3-2-4-8-4","_2-3-2-4-7-5","_2-3-2-4-7-4","_2-3-2-4-6-5","_2-3-2-4-6-4","_2-3-2-3-9-5","_2-3-2-3-9-4","_2-3-2-3-8-5","_2-3-2-3-8-4","_2-3-2-3-7-5","_2-3-2-3-7-4","_2-3-2-3-6-5","_2-3-2-3-6-4","_2-3-2-2-9-5","_2-3-2-2-9-4","_2-3-2-2-8-5","_2-3-2-2-8-4","_2-3-2-2-7-5","_2-3-2-2-7-4","_2-3-2-2-6-5","_2-3-2-2-6-4","_2-3-1-4-9-5","_2-3-1-4-9-4","_2-3-1-4-8-5","_2-3-1-4-8-4","_2-3-1-4-7-5","_2-3-1-4-7-4","_2-3-1-4-6-5","_2-3-1-4-6-4","_2-3-1-3-9-5","_2-3-1-3-9-4","_2-3-1-3-8-5","_2-3-1-3-8-4","_2-3-1-3-7-5","_2-3-1-3-7-4","_2-3-1-3-6-5","_2-3-1-3-6-4","_2-3-1-2-9-5","_2-3-1-2-9-4","_2-3-1-2-8-5","_2-3-1-2-8-4","_2-3-1-2-7-5","_2-3-1-2-7-4","_2-3-1-2-6-5","_2-3-1-2-6-4","_2-2-2-4-9-5","_2-2-2-4-9-4","_2-2-2-4-8-5","_2-2-2-4-8-4","_2-2-2-4-7-5","_2-2-2-4-7-4","_2-2-2-4-6-5","_2-2-2-4-6-4","_2-2-2-3-9-5","_2-2-2-3-9-4","_2-2-2-3-8-5","_2-2-2-3-8-4","_2-2-2-3-7-5","_2-2-2-3-7-4","_2-2-2-3-6-5","_2-2-2-3-6-4","_2-2-2-2-9-5","_2-2-2-2-9-4","_2-2-2-2-8-5","_2-2-2-2-8-4","_2-2-2-2-7-5","_2-2-2-2-7-4","_2-2-2-2-6-5","_2-2-2-2-6-4","_2-2-1-4-9-5","_2-2-1-4-9-4","_2-2-1-4-8-5","_2-2-1-4-8-4","_2-2-1-4-7-5","_2-2-1-4-7-4","_2-2-1-4-6-5","_2-2-1-4-6-4","_2-2-1-3-9-5","_2-2-1-3-9-4","_2-2-1-3-8-5","_2-2-1-3-8-4","_2-2-1-3-7-5","_2-2-1-3-7-4","_2-2-1-3-6-5","_2-2-1-3-6-4","_2-2-1-2-9-5","_2-2-1-2-9-4","_2-2-1-2-8-5","_2-2-1-2-8-4","_2-2-1-2-7-5","_2-2-1-2-7-4","_2-2-1-2-6-5","_2-2-1-2-6-4"],
    ["_3-4-2-4-9-5","_3-4-2-4-9-4","_3-4-2-4-8-5","_3-4-2-4-8-4","_3-4-2-4-7-5","_3-4-2-4-7-4","_3-4-2-4-6-5","_3-4-2-4-6-4","_3-4-2-3-9-5","_3-4-2-3-9-4","_3-4-2-3-8-5","_3-4-2-3-8-4","_3-4-2-3-7-5","_3-4-2-3-7-4","_3-4-2-3-6-5","_3-4-2-3-6-4","_3-4-2-2-9-5","_3-4-2-2-9-4","_3-4-2-2-8-5","_3-4-2-2-8-4","_3-4-2-2-7-5","_3-4-2-2-7-4","_3-4-2-2-6-5","_3-4-2-2-6-4","_3-4-1-4-9-5","_3-4-1-4-9-4","_3-4-1-4-8-5","_3-4-1-4-8-4","_3-4-1-4-7-5","_3-4-1-4-7-4","_3-4-1-4-6-5","_3-4-1-4-6-4","_3-4-1-3-9-5","_3-4-1-3-9-4","_3-4-1-3-8-5","_3-4-1-3-8-4","_3-4-1-3-7-5","_3-4-1-3-7-4","_3-4-1-3-6-5","_3-4-1-3-6-4","_3-4-1-2-9-5","_3-4-1-2-9-4","_3-4-1-2-8-5","_3-4-1-2-8-4","_3-4-1-2-7-5","_3-4-1-2-7-4","_3-4-1-2-6-5","_3-4-1-2-6-4","_3-3-2-4-9-5","_3-3-2-4-9-4","_3-3-2-4-8-5","_3-3-2-4-8-4","_3-3-2-4-7-5","_3-3-2-4-7-4","_3-3-2-4-6-5","_3-3-2-4-6-4","_3-3-2-3-9-5","_3-3-2-3-9-4","_3-3-2-3-8-5","_3-3-2-3-8-4","_3-3-2-3-7-5","_3-3-2-3-7-4","_3-3-2-3-6-5","_3-3-2-3-6-4","_3-3-2-2-9-5","_3-3-2-2-9-4","_3-3-2-2-8-5","_3-3-2-2-8-4","_3-3-2-2-7-5","_3-3-2-2-7-4","_3-3-2-2-6-5","_3-3-2-2-6-4","_3-3-1-4-9-5","_3-3-1-4-9-4","_3-3-1-4-8-5","_3-3-1-4-8-4","_3-3-1-4-7-5","_3-3-1-4-7-4","_3-3-1-4-6-5","_3-3-1-4-6-4","_3-3-1-3-9-5","_3-3-1-3-9-4","_3-3-1-3-8-5","_3-3-1-3-8-4","_3-3-1-3-7-5","_3-3-1-3-7-4","_3-3-1-3-6-5","_3-3-1-3-6-4","_3-3-1-2-9-5","_3-3-1-2-9-4","_3-3-1-2-8-5","_3-3-1-2-8-4","_3-3-1-2-7-5","_3-3-1-2-7-4","_3-3-1-2-6-5","_3-3-1-2-6-4","_3-2-2-4-9-5","_3-2-2-4-9-4","_3-2-2-4-8-5","_3-2-2-4-8-4","_3-2-2-4-7-5","_3-2-2-4-7-4","_3-2-2-4-6-5","_3-2-2-4-6-4","_3-2-2-3-9-5","_3-2-2-3-9-4","_3-2-2-3-8-5","_3-2-2-3-8-4","_3-2-2-3-7-5","_3-2-2-3-7-4","_3-2-2-3-6-5","_3-2-2-3-6-4","_3-2-2-2-9-5","_3-2-2-2-9-4","_3-2-2-2-8-5","_3-2-2-2-8-4","_3-2-2-2-7-5","_3-2-2-2-7-4","_3-2-2-2-6-5","_3-2-2-2-6-4","_3-2-1-4-9-5","_3-2-1-4-9-4","_3-2-1-4-8-5","_3-2-1-4-8-4","_3-2-1-4-7-5","_3-2-1-4-7-4","_3-2-1-4-6-5","_3-2-1-4-6-4","_3-2-1-3-9-5","_3-2-1-3-9-4","_3-2-1-3-8-5","_3-2-1-3-8-4","_3-2-1-3-7-5","_3-2-1-3-7-4","_3-2-1-3-6-5","_3-2-1-3-6-4","_3-2-1-2-9-5","_3-2-1-2-9-4","_3-2-1-2-8-5","_3-2-1-2-8-4","_3-2-1-2-7-5","_3-2-1-2-7-4","_3-2-1-2-6-5","_3-2-1-2-6-4","_2-4-2-4-9-5","_2-4-2-4-9-4","_2-4-2-4-8-5","_2-4-2-4-8-4","_2-4-2-4-7-5","_2-4-2-4-7-4","_2-4-2-4-6-5","_2-4-2-4-6-4","_2-4-2-3-9-5","_2-4-2-3-9-4","_2-4-2-3-8-5","_2-4-2-3-8-4","_2-4-2-3-7-5","_2-4-2-3-7-4","_2-4-2-3-6-5","_2-4-2-3-6-4","_2-4-2-2-9-5","_2-4-2-2-9-4","_2-4-2-2-8-5","_2-4-2-2-8-4","_2-4-2-2-7-5","_2-4-2-2-7-4","_2-4-2-2-6-5","_2-4-2-2-6-4","_2-4-1-4-9-5","_2-4-1-4-9-4","_2-4-1-4-8-5","_2-4-1-4-8-4","_2-4-1-4-7-5","_2-4-1-4-7-4","_2-4-1-4-6-5","_2-4-1-4-6-4","_2-4-1-3-9-5","_2-4-1-3-9-4","_2-4-1-3-8-5","_2-4-1-3-8-4","_2-4-1-3-7-5","_2-4-1-3-7-4","_2-4-1-3-6-5","_2-4-1-3-6-4","_2-4-1-2-9-5","_2-4-1-2-9-4","_2-4-1-2-8-5","_2-4-1-2-8-4","_2-4-1-2-7-5","_2-4-1-2-7-4","_2-4-1-2-6-5","_2-4-1-2-6-4","_2-3-2-4-9-5","_2-3-2-4-9-4","_2-3-2-4-8-5","_2-3-2-4-8-4","_2-3-2-4-7-5","_2-3-2-4-7-4","_2-3-2-4-6-5","_2-3-2-4-6-4","_2-3-2-3-9-5","_2-3-2-3-9-4","_2-3-2-3-8-5","_2-3-2-3-8-4","_2-3-2-3-7-5","_2-3-2-3-7-4","_2-3-2-3-6-5","_2-3-2-3-6-4","_2-3-2-2-9-5","_2-3-2-2-9-4","_2-3-2-2-8-5","_2-3-2-2-8-4","_2-3-2-2-7-5","_2-3-2-2-7-4","_2-3-2-2-6-5","_2-3-2-2-6-4","_2-3-1-4-9-5","_2-3-1-4-9-4","_2-3-1-4-8-5","_2-3-1-4-8-4","_2-3-1-4-7-5","_2-3-1-4-7-4","_2-3-1-4-6-5","_2-3-1-4-6-4","_2-3-1-3-9-5","_2-3-1-3-9-4","_2-3-1-3-8-5","_2-3-1-3-8-4","_2-3-1-3-7-5","_2-3-1-3-7-4","_2-3-1-3-6-5","_2-3-1-3-6-4","_2-3-1-2-9-5","_2-3-1-2-9-4","_2-3-1-2-8-5","_2-3-1-2-8-4","_2-3-1-2-7-5","_2-3-1-2-7-4","_2-3-1-2-6-5","_2-3-1-2-6-4","_2-2-2-4-9-5","_2-2-2-4-9-4","_2-2-2-4-8-5","_2-2-2-4-8-4","_2-2-2-4-7-5","_2-2-2-4-7-4","_2-2-2-4-6-5","_2-2-2-4-6-4","_2-2-2-3-9-5","_2-2-2-3-9-4","_2-2-2-3-8-5","_2-2-2-3-8-4","_2-2-2-3-7-5","_2-2-2-3-7-4","_2-2-2-3-6-5","_2-2-2-3-6-4","_2-2-2-2-9-5","_2-2-2-2-9-4","_2-2-2-2-8-5","_2-2-2-2-8-4","_2-2-2-2-7-5","_2-2-2-2-7-4","_2-2-2-2-6-5","_2-2-2-2-6-4","_2-2-1-4-9-5","_2-2-1-4-9-4","_2-2-1-4-8-5","_2-2-1-4-8-4","_2-2-1-4-7-5","_2-2-1-4-7-4","_2-2-1-4-6-5","_2-2-1-4-6-4","_2-2-1-3-9-5","_2-2-1-3-9-4","_2-2-1-3-8-5","_2-2-1-3-8-4","_2-2-1-3-7-5","_2-2-1-3-7-4","_2-2-1-3-6-5","_2-2-1-3-6-4","_2-2-1-2-9-5","_2-2-1-2-9-4","_2-2-1-2-8-5","_2-2-1-2-8-4","_2-2-1-2-7-5","_2-2-1-2-7-4","_2-2-1-2-6-5","_2-2-1-2-6-4"]
]

cases=["case1"]
envs=["result_graph1","result_graph4"]

our="RAMPA"
comp1="NCAR"
comp2="PE"
allocateTime_base=[]
allocateTime_large=[]
interval_base=[]
interval_large=[]

for env in envs:
    for allocCase in cases:
        label=[]
        
        allocateTime1=[]
        allocateTime2=[]
        allocateTime3=[]
        seqCnt=0
        
        for pol in range(1):
            time1=[]
            time2=[]
            time3=[]
            time4=[]
            time5=[]
            time6=[]
            for stagePol in stagePolicy[pol]:
                
                reqNum=0.0
                reqNum1=0.0
                reqNum2=0.0
                reqNum3=0.0
                reqNum4=0.0
                reqNum5=0.0
                reqNum6=0.0
                time=0.0


                for i in range(2):
                    seq = open('./'+env+"/"+allocCase+'/result/result_pol'+str(pol)+str(stagePol)+'_seq'+str(i+1)+'.csv', 'r', encoding='shift-jis')
                    while True:
                        data = seq.readline()
                        if "タイムスロット" in data:
                            continue
                        if data == '':
                            break
                        tmp=data.split(",")

                        if tmp[1]=="1":
                            time1.append(float(tmp[8])*0.001)
                            reqNum1+=1.0
                        elif tmp[1]=="2":
                            time2.append(float(tmp[8])*0.001)
                            reqNum2+=1.0
                        elif tmp[1]=="3":
                            time3.append(float(tmp[8])*0.001)
                            reqNum3+=1.0
                        elif tmp[1]=="4":
                            time4.append(float(tmp[8])*0.001)
                            reqNum4+=1.0
                        elif tmp[1]=="5":
                            time5.append(float(tmp[8])*0.001)
                            reqNum5+=1.0
                        elif tmp[1]=="6":
                            time6.append(float(tmp[8])*0.001)
                            reqNum6+=1.0
                        time+=float(tmp[8])
                        reqNum+=1.0
                if env=="result_graph1":
                    allocateTime_base.append(mean(time1))
                    allocateTime_base.append(mean(time2))
                    allocateTime_base.append(mean(time4))
                    allocateTime_base.append(mean(time3))
                    allocateTime_base.append(mean(time5))
                    allocateTime_base.append(mean(time6))
                elif env=="result_graph4":
                    allocateTime_large.append(mean(time1))
                    allocateTime_large.append(mean(time2))
                    allocateTime_large.append(mean(time4))
                    allocateTime_large.append(mean(time3))
                    allocateTime_large.append(mean(time5))
                    allocateTime_large.append(mean(time6))


                seq.close()
            seqCnt+=1



            a = 0.95

            df = pd.DataFrame(list(zip(time1,time2,time3,time4,time5,time6)))
            d = len(df)-1
            m = df.mean()
            s = stats.sem(df)

            if env=="result_graph1":
                interval_base = stats.t.interval(alpha = a, df = d, loc = m, scale =s)[1]-allocateTime_base
            elif env=="result_graph4":
                interval_large = stats.t.interval(alpha = a, df = d, loc = m, scale =s)[1]-allocateTime_large



col_labels = ['Allocation time']


bar_width = 0.3
alpha = 0.8
kankaku=0.05

fig, ax = plt.subplots()


plt.figure(figsize=[6,4.2])
x1=[15,26,29,35,49,67]
label = ["Service\n1", "Service\n2", "Service\n4", "Service\n3", "Service\n5", "Service\n6"]

x_offsets = [1.7, -1, 0, 0, 0.5, -1]
y_offsets = [3.2, 3.5, 6.5, 6.2, 1.5, 0.5]

plt.plot(x1,allocateTime_base,marker="+",color='blue',label='Base cluster')

for i in range(len(x1)):
    plt.text(x1[i] + x_offsets[i], allocateTime_base[i] + y_offsets[i], label[i], ha='center', va='bottom')
    
plt.errorbar(x1, allocateTime_base, yerr=interval_base, capsize=4, ecolor='black', color='blue',label='95% confidence interval of base cluster')

plt.plot(x1,allocateTime_large,marker="*",color='red',label='Large Cluster')
plt.errorbar(x1, allocateTime_large, yerr=interval_large, capsize=4, ecolor='black', color='red',label='95% confidence interval of large cluster')


plt.ylabel('Average computational time\nfor model partitioning\n and allocation (s)',fontsize=20)
plt.xlabel('Number of operations',fontsize=20)



plt.ylim(0, 30)


plt.legend(['Base cluster',  'Large Cluster', '95% confidence interval of base cluster','95% confidence interval of large cluster'],loc="upper center",fontsize=12, ncol=1,bbox_to_anchor=(0.5, 1.1),framealpha=1)
plt.tight_layout()

envs=["result_graph1","result_graph2","result_graph3"]

envname=""

plt.savefig("./allocationTime.pdf",dpi=130,bbox_inches = 'tight', pad_inches = 0.05)


