from tarfile import PAX_NAME_FIELDS
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

stagePolicy=[
    [""],
    ["_3-4-2-4-9-5","_3-4-2-4-9-4","_3-4-2-4-8-5","_3-4-2-4-8-4","_3-4-2-4-7-5","_3-4-2-4-7-4","_3-4-2-4-6-5","_3-4-2-4-6-4","_3-4-2-3-9-5","_3-4-2-3-9-4","_3-4-2-3-8-5","_3-4-2-3-8-4","_3-4-2-3-7-5","_3-4-2-3-7-4","_3-4-2-3-6-5","_3-4-2-3-6-4","_3-4-2-2-9-5","_3-4-2-2-9-4","_3-4-2-2-8-5","_3-4-2-2-8-4","_3-4-2-2-7-5","_3-4-2-2-7-4","_3-4-2-2-6-5","_3-4-2-2-6-4","_3-4-1-4-9-5","_3-4-1-4-9-4","_3-4-1-4-8-5","_3-4-1-4-8-4","_3-4-1-4-7-5","_3-4-1-4-7-4","_3-4-1-4-6-5","_3-4-1-4-6-4","_3-4-1-3-9-5","_3-4-1-3-9-4","_3-4-1-3-8-5","_3-4-1-3-8-4","_3-4-1-3-7-5","_3-4-1-3-7-4","_3-4-1-3-6-5","_3-4-1-3-6-4","_3-4-1-2-9-5","_3-4-1-2-9-4","_3-4-1-2-8-5","_3-4-1-2-8-4","_3-4-1-2-7-5","_3-4-1-2-7-4","_3-4-1-2-6-5","_3-4-1-2-6-4","_3-3-2-4-9-5","_3-3-2-4-9-4","_3-3-2-4-8-5","_3-3-2-4-8-4","_3-3-2-4-7-5","_3-3-2-4-7-4","_3-3-2-4-6-5","_3-3-2-4-6-4","_3-3-2-3-9-5","_3-3-2-3-9-4","_3-3-2-3-8-5","_3-3-2-3-8-4","_3-3-2-3-7-5","_3-3-2-3-7-4","_3-3-2-3-6-5","_3-3-2-3-6-4","_3-3-2-2-9-5","_3-3-2-2-9-4","_3-3-2-2-8-5","_3-3-2-2-8-4","_3-3-2-2-7-5","_3-3-2-2-7-4","_3-3-2-2-6-5","_3-3-2-2-6-4","_3-3-1-4-9-5","_3-3-1-4-9-4","_3-3-1-4-8-5","_3-3-1-4-8-4","_3-3-1-4-7-5","_3-3-1-4-7-4","_3-3-1-4-6-5","_3-3-1-4-6-4","_3-3-1-3-9-5","_3-3-1-3-9-4","_3-3-1-3-8-5","_3-3-1-3-8-4","_3-3-1-3-7-5","_3-3-1-3-7-4","_3-3-1-3-6-5","_3-3-1-3-6-4","_3-3-1-2-9-5","_3-3-1-2-9-4","_3-3-1-2-8-5","_3-3-1-2-8-4","_3-3-1-2-7-5","_3-3-1-2-7-4","_3-3-1-2-6-5","_3-3-1-2-6-4","_3-2-2-4-9-5","_3-2-2-4-9-4","_3-2-2-4-8-5","_3-2-2-4-8-4","_3-2-2-4-7-5","_3-2-2-4-7-4","_3-2-2-4-6-5","_3-2-2-4-6-4","_3-2-2-3-9-5","_3-2-2-3-9-4","_3-2-2-3-8-5","_3-2-2-3-8-4","_3-2-2-3-7-5","_3-2-2-3-7-4","_3-2-2-3-6-5","_3-2-2-3-6-4","_3-2-2-2-9-5","_3-2-2-2-9-4","_3-2-2-2-8-5","_3-2-2-2-8-4","_3-2-2-2-7-5","_3-2-2-2-7-4","_3-2-2-2-6-5","_3-2-2-2-6-4","_3-2-1-4-9-5","_3-2-1-4-9-4","_3-2-1-4-8-5","_3-2-1-4-8-4","_3-2-1-4-7-5","_3-2-1-4-7-4","_3-2-1-4-6-5","_3-2-1-4-6-4","_3-2-1-3-9-5","_3-2-1-3-9-4","_3-2-1-3-8-5","_3-2-1-3-8-4","_3-2-1-3-7-5","_3-2-1-3-7-4","_3-2-1-3-6-5","_3-2-1-3-6-4","_3-2-1-2-9-5","_3-2-1-2-9-4","_3-2-1-2-8-5","_3-2-1-2-8-4","_3-2-1-2-7-5","_3-2-1-2-7-4","_3-2-1-2-6-5","_3-2-1-2-6-4","_2-4-2-4-9-5","_2-4-2-4-9-4","_2-4-2-4-8-5","_2-4-2-4-8-4","_2-4-2-4-7-5","_2-4-2-4-7-4","_2-4-2-4-6-5","_2-4-2-4-6-4","_2-4-2-3-9-5","_2-4-2-3-9-4","_2-4-2-3-8-5","_2-4-2-3-8-4","_2-4-2-3-7-5","_2-4-2-3-7-4","_2-4-2-3-6-5","_2-4-2-3-6-4","_2-4-2-2-9-5","_2-4-2-2-9-4","_2-4-2-2-8-5","_2-4-2-2-8-4","_2-4-2-2-7-5","_2-4-2-2-7-4","_2-4-2-2-6-5","_2-4-2-2-6-4","_2-4-1-4-9-5","_2-4-1-4-9-4","_2-4-1-4-8-5","_2-4-1-4-8-4","_2-4-1-4-7-5","_2-4-1-4-7-4","_2-4-1-4-6-5","_2-4-1-4-6-4","_2-4-1-3-9-5","_2-4-1-3-9-4","_2-4-1-3-8-5","_2-4-1-3-8-4","_2-4-1-3-7-5","_2-4-1-3-7-4","_2-4-1-3-6-5","_2-4-1-3-6-4","_2-4-1-2-9-5","_2-4-1-2-9-4","_2-4-1-2-8-5","_2-4-1-2-8-4","_2-4-1-2-7-5","_2-4-1-2-7-4","_2-4-1-2-6-5","_2-4-1-2-6-4","_2-3-2-4-9-5","_2-3-2-4-9-4","_2-3-2-4-8-5","_2-3-2-4-8-4","_2-3-2-4-7-5","_2-3-2-4-7-4","_2-3-2-4-6-5","_2-3-2-4-6-4","_2-3-2-3-9-5","_2-3-2-3-9-4","_2-3-2-3-8-5","_2-3-2-3-8-4","_2-3-2-3-7-5","_2-3-2-3-7-4","_2-3-2-3-6-5","_2-3-2-3-6-4","_2-3-2-2-9-5","_2-3-2-2-9-4","_2-3-2-2-8-5","_2-3-2-2-8-4","_2-3-2-2-7-5","_2-3-2-2-7-4","_2-3-2-2-6-5","_2-3-2-2-6-4","_2-3-1-4-9-5","_2-3-1-4-9-4","_2-3-1-4-8-5","_2-3-1-4-8-4","_2-3-1-4-7-5","_2-3-1-4-7-4","_2-3-1-4-6-5","_2-3-1-4-6-4","_2-3-1-3-9-5","_2-3-1-3-9-4","_2-3-1-3-8-5","_2-3-1-3-8-4","_2-3-1-3-7-5","_2-3-1-3-7-4","_2-3-1-3-6-5","_2-3-1-3-6-4","_2-3-1-2-9-5","_2-3-1-2-9-4","_2-3-1-2-8-5","_2-3-1-2-8-4","_2-3-1-2-7-5","_2-3-1-2-7-4","_2-3-1-2-6-5","_2-3-1-2-6-4","_2-2-2-4-9-5","_2-2-2-4-9-4","_2-2-2-4-8-5","_2-2-2-4-8-4","_2-2-2-4-7-5","_2-2-2-4-7-4","_2-2-2-4-6-5","_2-2-2-4-6-4","_2-2-2-3-9-5","_2-2-2-3-9-4","_2-2-2-3-8-5","_2-2-2-3-8-4","_2-2-2-3-7-5","_2-2-2-3-7-4","_2-2-2-3-6-5","_2-2-2-3-6-4","_2-2-2-2-9-5","_2-2-2-2-9-4","_2-2-2-2-8-5","_2-2-2-2-8-4","_2-2-2-2-7-5","_2-2-2-2-7-4","_2-2-2-2-6-5","_2-2-2-2-6-4","_2-2-1-4-9-5","_2-2-1-4-9-4","_2-2-1-4-8-5","_2-2-1-4-8-4","_2-2-1-4-7-5","_2-2-1-4-7-4","_2-2-1-4-6-5","_2-2-1-4-6-4","_2-2-1-3-9-5","_2-2-1-3-9-4","_2-2-1-3-8-5","_2-2-1-3-8-4","_2-2-1-3-7-5","_2-2-1-3-7-4","_2-2-1-3-6-5","_2-2-1-3-6-4","_2-2-1-2-9-5","_2-2-1-2-9-4","_2-2-1-2-8-5","_2-2-1-2-8-4","_2-2-1-2-7-5","_2-2-1-2-7-4","_2-2-1-2-6-5","_2-2-1-2-6-4"],
    ["_3-4-2-4-9-5","_3-4-2-4-9-4","_3-4-2-4-8-5","_3-4-2-4-8-4","_3-4-2-4-7-5","_3-4-2-4-7-4","_3-4-2-4-6-5","_3-4-2-4-6-4","_3-4-2-3-9-5","_3-4-2-3-9-4","_3-4-2-3-8-5","_3-4-2-3-8-4","_3-4-2-3-7-5","_3-4-2-3-7-4","_3-4-2-3-6-5","_3-4-2-3-6-4","_3-4-2-2-9-5","_3-4-2-2-9-4","_3-4-2-2-8-5","_3-4-2-2-8-4","_3-4-2-2-7-5","_3-4-2-2-7-4","_3-4-2-2-6-5","_3-4-2-2-6-4","_3-4-1-4-9-5","_3-4-1-4-9-4","_3-4-1-4-8-5","_3-4-1-4-8-4","_3-4-1-4-7-5","_3-4-1-4-7-4","_3-4-1-4-6-5","_3-4-1-4-6-4","_3-4-1-3-9-5","_3-4-1-3-9-4","_3-4-1-3-8-5","_3-4-1-3-8-4","_3-4-1-3-7-5","_3-4-1-3-7-4","_3-4-1-3-6-5","_3-4-1-3-6-4","_3-4-1-2-9-5","_3-4-1-2-9-4","_3-4-1-2-8-5","_3-4-1-2-8-4","_3-4-1-2-7-5","_3-4-1-2-7-4","_3-4-1-2-6-5","_3-4-1-2-6-4","_3-3-2-4-9-5","_3-3-2-4-9-4","_3-3-2-4-8-5","_3-3-2-4-8-4","_3-3-2-4-7-5","_3-3-2-4-7-4","_3-3-2-4-6-5","_3-3-2-4-6-4","_3-3-2-3-9-5","_3-3-2-3-9-4","_3-3-2-3-8-5","_3-3-2-3-8-4","_3-3-2-3-7-5","_3-3-2-3-7-4","_3-3-2-3-6-5","_3-3-2-3-6-4","_3-3-2-2-9-5","_3-3-2-2-9-4","_3-3-2-2-8-5","_3-3-2-2-8-4","_3-3-2-2-7-5","_3-3-2-2-7-4","_3-3-2-2-6-5","_3-3-2-2-6-4","_3-3-1-4-9-5","_3-3-1-4-9-4","_3-3-1-4-8-5","_3-3-1-4-8-4","_3-3-1-4-7-5","_3-3-1-4-7-4","_3-3-1-4-6-5","_3-3-1-4-6-4","_3-3-1-3-9-5","_3-3-1-3-9-4","_3-3-1-3-8-5","_3-3-1-3-8-4","_3-3-1-3-7-5","_3-3-1-3-7-4","_3-3-1-3-6-5","_3-3-1-3-6-4","_3-3-1-2-9-5","_3-3-1-2-9-4","_3-3-1-2-8-5","_3-3-1-2-8-4","_3-3-1-2-7-5","_3-3-1-2-7-4","_3-3-1-2-6-5","_3-3-1-2-6-4","_3-2-2-4-9-5","_3-2-2-4-9-4","_3-2-2-4-8-5","_3-2-2-4-8-4","_3-2-2-4-7-5","_3-2-2-4-7-4","_3-2-2-4-6-5","_3-2-2-4-6-4","_3-2-2-3-9-5","_3-2-2-3-9-4","_3-2-2-3-8-5","_3-2-2-3-8-4","_3-2-2-3-7-5","_3-2-2-3-7-4","_3-2-2-3-6-5","_3-2-2-3-6-4","_3-2-2-2-9-5","_3-2-2-2-9-4","_3-2-2-2-8-5","_3-2-2-2-8-4","_3-2-2-2-7-5","_3-2-2-2-7-4","_3-2-2-2-6-5","_3-2-2-2-6-4","_3-2-1-4-9-5","_3-2-1-4-9-4","_3-2-1-4-8-5","_3-2-1-4-8-4","_3-2-1-4-7-5","_3-2-1-4-7-4","_3-2-1-4-6-5","_3-2-1-4-6-4","_3-2-1-3-9-5","_3-2-1-3-9-4","_3-2-1-3-8-5","_3-2-1-3-8-4","_3-2-1-3-7-5","_3-2-1-3-7-4","_3-2-1-3-6-5","_3-2-1-3-6-4","_3-2-1-2-9-5","_3-2-1-2-9-4","_3-2-1-2-8-5","_3-2-1-2-8-4","_3-2-1-2-7-5","_3-2-1-2-7-4","_3-2-1-2-6-5","_3-2-1-2-6-4","_2-4-2-4-9-5","_2-4-2-4-9-4","_2-4-2-4-8-5","_2-4-2-4-8-4","_2-4-2-4-7-5","_2-4-2-4-7-4","_2-4-2-4-6-5","_2-4-2-4-6-4","_2-4-2-3-9-5","_2-4-2-3-9-4","_2-4-2-3-8-5","_2-4-2-3-8-4","_2-4-2-3-7-5","_2-4-2-3-7-4","_2-4-2-3-6-5","_2-4-2-3-6-4","_2-4-2-2-9-5","_2-4-2-2-9-4","_2-4-2-2-8-5","_2-4-2-2-8-4","_2-4-2-2-7-5","_2-4-2-2-7-4","_2-4-2-2-6-5","_2-4-2-2-6-4","_2-4-1-4-9-5","_2-4-1-4-9-4","_2-4-1-4-8-5","_2-4-1-4-8-4","_2-4-1-4-7-5","_2-4-1-4-7-4","_2-4-1-4-6-5","_2-4-1-4-6-4","_2-4-1-3-9-5","_2-4-1-3-9-4","_2-4-1-3-8-5","_2-4-1-3-8-4","_2-4-1-3-7-5","_2-4-1-3-7-4","_2-4-1-3-6-5","_2-4-1-3-6-4","_2-4-1-2-9-5","_2-4-1-2-9-4","_2-4-1-2-8-5","_2-4-1-2-8-4","_2-4-1-2-7-5","_2-4-1-2-7-4","_2-4-1-2-6-5","_2-4-1-2-6-4","_2-3-2-4-9-5","_2-3-2-4-9-4","_2-3-2-4-8-5","_2-3-2-4-8-4","_2-3-2-4-7-5","_2-3-2-4-7-4","_2-3-2-4-6-5","_2-3-2-4-6-4","_2-3-2-3-9-5","_2-3-2-3-9-4","_2-3-2-3-8-5","_2-3-2-3-8-4","_2-3-2-3-7-5","_2-3-2-3-7-4","_2-3-2-3-6-5","_2-3-2-3-6-4","_2-3-2-2-9-5","_2-3-2-2-9-4","_2-3-2-2-8-5","_2-3-2-2-8-4","_2-3-2-2-7-5","_2-3-2-2-7-4","_2-3-2-2-6-5","_2-3-2-2-6-4","_2-3-1-4-9-5","_2-3-1-4-9-4","_2-3-1-4-8-5","_2-3-1-4-8-4","_2-3-1-4-7-5","_2-3-1-4-7-4","_2-3-1-4-6-5","_2-3-1-4-6-4","_2-3-1-3-9-5","_2-3-1-3-9-4","_2-3-1-3-8-5","_2-3-1-3-8-4","_2-3-1-3-7-5","_2-3-1-3-7-4","_2-3-1-3-6-5","_2-3-1-3-6-4","_2-3-1-2-9-5","_2-3-1-2-9-4","_2-3-1-2-8-5","_2-3-1-2-8-4","_2-3-1-2-7-5","_2-3-1-2-7-4","_2-3-1-2-6-5","_2-3-1-2-6-4","_2-2-2-4-9-5","_2-2-2-4-9-4","_2-2-2-4-8-5","_2-2-2-4-8-4","_2-2-2-4-7-5","_2-2-2-4-7-4","_2-2-2-4-6-5","_2-2-2-4-6-4","_2-2-2-3-9-5","_2-2-2-3-9-4","_2-2-2-3-8-5","_2-2-2-3-8-4","_2-2-2-3-7-5","_2-2-2-3-7-4","_2-2-2-3-6-5","_2-2-2-3-6-4","_2-2-2-2-9-5","_2-2-2-2-9-4","_2-2-2-2-8-5","_2-2-2-2-8-4","_2-2-2-2-7-5","_2-2-2-2-7-4","_2-2-2-2-6-5","_2-2-2-2-6-4","_2-2-1-4-9-5","_2-2-1-4-9-4","_2-2-1-4-8-5","_2-2-1-4-8-4","_2-2-1-4-7-5","_2-2-1-4-7-4","_2-2-1-4-6-5","_2-2-1-4-6-4","_2-2-1-3-9-5","_2-2-1-3-9-4","_2-2-1-3-8-5","_2-2-1-3-8-4","_2-2-1-3-7-5","_2-2-1-3-7-4","_2-2-1-3-6-5","_2-2-1-3-6-4","_2-2-1-2-9-5","_2-2-1-2-9-4","_2-2-1-2-8-5","_2-2-1-2-8-4","_2-2-1-2-7-5","_2-2-1-2-7-4","_2-2-1-2-6-5","_2-2-1-2-6-4"]
]

cases=["case1","case2","case3","case4"]
envs=["result_graph1","result_graph2","result_graph3","result_graph4"]


envLabel={"result_graph1":"\nin base cluster","result_graph2":"\nin high bandwidth cluster","result_graph3":"\nin high performance cluster","result_graph4":"\nin large cluster"}

our="RAMPA"
comp1="NCAR"
comp2="PE"


def partitionString(partirionPolicy):

    a=partirionPolicy.split("_")[1].split("-")
    return "("+a[0]+","+a[1]+","+a[2]+","+a[3]+","+a[4]+","+a[5]+")"


def autolabel(rects,upper):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()+offsets
        plt.annotate("as",
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 1),  # 1 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom',fontsize=9)



for env in envs:
    fig = plt.figure(figsize=(18,8))
    plt.subplots_adjust(wspace=0.05,hspace=0.6)

    for allocCase in cases:

        if allocCase=="case1":
            plt.subplot(1,4,1)
            plt.title("Same demand for all services"+envLabel[env],fontsize=15)
            plt.ylabel('Number of \nallocated tasks',fontsize=18)
        elif allocCase=="case2":
            plt.subplot(1,4,2)
            plt.title("High demand for high throughput services"+envLabel[env],fontsize=15)
            plt.tick_params(left=False,labelleft=False)
        elif allocCase=="case3":
            plt.subplot(1,4,3)
            plt.title("High demand for low delay services"+envLabel[env],fontsize=15)
            plt.tick_params(left=False,labelleft=False)
        elif allocCase=="case4":
            plt.subplot(1,4,4)
            plt.title("High demand for huge model services"+envLabel[env],fontsize=15)
            plt.tick_params(left=False,labelleft=False)



        allocateNum=[[],[],[]]
        partitionPatterns=[[],[],[]]


        seqCnt=0
        for i in range(2):
            for pol in range(3):
                bestPartitionPattern=""
                worstPartitionPattern=""
                bestSum=0
                worstSum=10000
                averageAllocatedCnt1=0.0
                averageAllocatedCnt2=0.0
                averageAllocatedCnt3=0.0
                averageAllocatedCnt4=0.0
                averageAllocatedCnt5=0.0
                averageAllocatedCnt6=0.0
                for stagePol in stagePolicy[pol]:
                    seq = open('./'+env+"/"+allocCase+'/result/result_pol'+str(pol)+str(stagePol)+'_seq'+str(i+1)+'.csv', 'r', encoding='shift-jis')

                    allocatedCnt1=0
                    allocatedCnt2=0
                    allocatedCnt3=0
                    allocatedCnt4=0
                    allocatedCnt5=0
                    allocatedCnt6=0
                    allocatedAll=0




                    while True:
                        data = seq.readline()
                        if "タイムスロット" in data:
                            continue
                        if data == '':
                            break
                        tmp=data.split(",")
                        if tmp[2]!="0":
                            break
                        allocatedAll+=1
                        if tmp[1]=="1":
                            allocatedCnt1+=1
                            averageAllocatedCnt1+=1
                        elif tmp[1]=="2":
                            allocatedCnt2+=1
                            averageAllocatedCnt2+=1
                        elif tmp[1]=="3":
                            allocatedCnt3+=1
                            averageAllocatedCnt3+=1
                        elif tmp[1]=="4":
                            allocatedCnt4+=1
                            averageAllocatedCnt4+=1
                        elif tmp[1]=="5":
                            allocatedCnt5+=1
                            averageAllocatedCnt5+=1
                        elif tmp[1]=="6":
                            allocatedCnt6+=1
                            averageAllocatedCnt6+=1                            
                    if bestSum < allocatedAll:
                        bestSum = allocatedAll
                        bestAllocatedSrvs=[allocatedCnt1,allocatedCnt2,allocatedCnt3,allocatedCnt4,allocatedCnt5,allocatedCnt6]
                        if pol!=0:
                            bestPartitionPattern=partitionString(stagePol)
                    if worstSum > allocatedAll:
                        worstSum = allocatedAll
                        worstAllocatedSrvs=[allocatedCnt1,allocatedCnt2,allocatedCnt3,allocatedCnt4,allocatedCnt5,allocatedCnt6]
                        if pol!=0:
                            worstPartitionPattern=partitionString(stagePol)


                    
                    seq.close()
                allocateNum[seqCnt].append(bestAllocatedSrvs)
                partitionPatterns[seqCnt].append(bestPartitionPattern)

                if pol!=0:
                    resNum=float(len(stagePolicy[pol]))
                    allocateNum[seqCnt].append([averageAllocatedCnt1/resNum,averageAllocatedCnt2/resNum,averageAllocatedCnt3/resNum,averageAllocatedCnt4/resNum,averageAllocatedCnt5/resNum,averageAllocatedCnt6/resNum])
                    partitionPatterns[seqCnt].append("")

                    allocateNum[seqCnt].append(worstAllocatedSrvs)
                    partitionPatterns[seqCnt].append(worstPartitionPattern)
            seqCnt+=1



        data=[]

        for i in range(seqCnt):

            data.append(np.array(allocateNum[i]))

        row_labels = [
            our,
            comp1+"\n(Best)",
            comp1+"\n(Average)",
            comp1+"\n(Worst)",
            comp2+"\n(Best)",
            comp2+"\n(Average)",
            comp2+"\n(Worst)",
        ]
        col_labels = ['Service 1 (High throughput)', 'Service 2 (High throughput)', 'Service 3 (Low delay)', 'Service 4 (Low delay)', 'Service 5 (Huge model)', 'Service 6 (Huge model)']

        bar_width = 0.3
        alpha = 0.8
        kankaku=0.05

        for i in range(seqCnt):

            df =pd.DataFrame(np.array(allocateNum[i]), index=row_labels, columns=col_labels)
            n_rows, n_cols = df.shape
            positions = np.arange(n_rows)
            offsets = np.zeros(n_rows, dtype=df.values.dtype)
            colors = plt.get_cmap("tab20")(np.linspace(0, 1, n_cols))
            plt.xticks(positions)
            pos=positions

            for ik in range(len(pos)):
                p=pos[ik]+(i+1)*bar_width-bar_width/2+0.04
                plt.text(p, sum(allocateNum[i][ik])+10,partitionPatterns[i][ik], rotation=90,fontsize=9)


            for j in range(len(df.columns)):

                rect=plt.bar(pos+((i+1)*bar_width), df.iloc[:, j],bar_width, bottom=offsets, color=colors[j],edgecolor='black')

                for xLabel in pos+((i+1)*bar_width)-bar_width/2+0.01:
                    plt.text(xLabel, -80,"Seq "+str(i+1), rotation=90,fontsize=12)
                    
                offsets += df.iloc[:, j]
                if i==0:
                    xs = [pos-1.25*bar_width, pos-1.25*bar_width]
                    ys = [0, -30]

                elif i==4:
                    xs = [pos[4]+(i*bar_width)+1.25*bar_width, pos[4]+(i*bar_width)+1.25*bar_width]
                    print(xs)
                    ys = [0, -30]

        index = np.arange(len(row_labels))

        plt.xticks(index+ (2*bar_width), row_labels,fontsize=14, position=(0.0, -0.11), rotation=90)

        plt.ylim(0, 780)

        plt.tight_layout()

    envs=["result_graph1","result_graph2","result_graph3","result_graph4"]

    envname=""
    if env=="result_graph1":
        envname="env1"
    elif env=="result_graph2":
        envname="env2"
    elif env=="result_graph3":
        envname="env3"
    else:
        envname="env4"
    fig.legend(['Service 1 (High throughput)', 'Service 2 (High throughput)', 'Service 3 (Low delay)', 'Service 4 (Low delay)', 'Service 5 (Huge model)', 'Service 6 (Huge model)'],loc="upper center",fontsize=16, ncol=3,bbox_to_anchor=(0.5, 1.1))

    plt.savefig("./services_"+envname+".pdf",dpi=130,bbox_inches = 'tight', pad_inches = 0.05)
